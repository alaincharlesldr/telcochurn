### DATA WRANGLING & EDA ###

------------


# Load dataset 
from reusable_code.load_huggingface_dataset import load_huggingface_dataset
telco = load_huggingface_dataset("aai510-group1/telco-customer-churn")

# Inspect data

telco.head()
telco.info()
telco.describe()

telco.isna().sum()
telco.nunique()


# Dealing with missing values
cols_missing_values = telco.columns[telco.isna().sum() > 0]
print(cols_missing_values)

# Checking missing values patterns across Churned/Non-churned users
non_churned = telco[telco['Churn'] == 0]
churned = telco[telco['Churn'] == 1]

churned.info()


# Imputing string to categorical data

def fill_missing_values(df):
    telco['Churn Category'].fillna('Retained User', inplace=True)
    telco['Churn Reason'].fillna('Retained User', inplace=True)
    telco['Internet Type'].fillna('No/Missing Internet Type', inplace=True)
    telco['Offer'].fillna('No/Missing Offer', inplace=True)
    return df

OR

telco['Internet Type'].fillna('No/Missing Internet Type', inplace=True)
telco['Offer'].fillna('Regular Plan', inplace=True)
telco['Churn Category'].fillna('NA / Retained User', inplace=True)
telco['Churn Reason'].fillna('NA / Retained User', inplace=True)


# Checking again for missing value, should be non-existent
telco.isna().sum()


# data types

telco.dtypes

as_string = ['Customer ID', 'Zip Code']
telco[as_string] = telco[as_string].astype(str) 
as_category = ['Churn Category', 'Churn Reason','City', 'Country', 'Customer Status', 'Internet Type', 'Offer', 'Payment Method', 'Quarter', 'State']
telco[as_category] = telco[as_category].astype('category')
telco['Gender'] = telco['Gender'].map({'Male': 1, 'Female': 0})

telco.dtypes

# Exploratory data analysis


-----

# Initial summary data



----

# for categorical variables: inspect patterns across churn and non-churn groups

cat_variables = ['Contract', 'Gender', 'Under 30', 'State', 'Multiple Lines', 'by Offer', 'Referred a Friend', 'Payment Method']

results = {}
                 
cat_variables = ['Contract', 'Gender', 'Under 30', 'Multiple Lines', 'Offer', 'Referred a Friend', 'Payment Method']
for cat in cat_variables:
    results[f"churn_by_{cat}"] = telco.groupby(cat)['Churn'].value_counts(normalize=True)

print(results)

# By Contract Type
g1 = sns.catplot(
    x='Contract', 
    hue='Churn', 
    data=telco, 
    kind='count', 
    order=['Month-to-Month', 'One Year', 'Two Year']
)
plt.title("Active vs Churned Users by Contract Type")
plt.ylabel("Number of Users")
plt.xlabel("Contract Type")
g1._legend.set_title('Users')
g1._legend.texts[0].set_text('Active')
g1._legend.texts[1].set_text('Churned')
plt.show()

# By Gender

g2 = sns.catplot(
    x=telco['Gender'].map({1: 'Male', 0: 'Female'}), 
    hue=telco['Churn'].map({1: 'Male', 0: 'Female'}), 
    data=telco, 
    kind='count', 
    order=['Female', 'Male']
)
plt.title("Active vs Churned Users by Gender")
plt.ylabel("Number of Users")
plt.xlabel("Gender")
g2._legend.set_title('Users')
g2._legend.texts[0].set_text('Active')
g2._legend.texts[1].set_text('Churned')
plt.show()

## By Under 30

g3 = sns.catplot(
    x=telco['Under 30'].map({1: 'Under 30', 0: '30 and Over'}),
    hue=telco['Churn'].map({0: 'Active', 1: 'Churned'}),
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Under 30")
plt.ylabel("Number of Users")
plt.xlabel("Under 30")
g3._legend.set_title('Users')
g3._legend.texts[0].set_text('Active')
g3._legend.texts[1].set_text('Churned')
plt.show()

## By Multiple Lines

g4 = sns.catplot(
    x=telco['Multiple Lines'].map({1: 'More than 1 Line', 0: '1 Line'}),
    hue=telco['Churn'].map({0: 'Active', 1: 'Churned'}),
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Number of Lines")
plt.ylabel("Number of Users")
plt.xlabel("Number of Lines")
g4._legend.set_title('Users')
g4._legend.texts[0].set_text('Active')
g4._legend.texts[1].set_text('Churned')
plt.show()


## By Offer

g5 = sns.catplot(
    x='Offer',
    hue='Churn',
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Offer Type")
plt.ylabel("Number of Users")
plt.xlabel("Offer Type")
g5._legend.set_title('Users')
g5._legend.texts[0].set_text('Active')
g5._legend.texts[1].set_text('Churned')
plt.show()


## By Friend Referral

g6 = sns.catplot(
    x=telco['Referred a Friend'].map({1: 'Yes', 0: 'No'}),
    hue=telco['Churn'].map({0: 'Active', 1: 'Churned'}),
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Referral")
plt.ylabel("Number of Users")
plt.xlabel("Referred a Friend")
g6._legend.set_title('Users')
g6._legend.texts[0].set_text('Active')
g6._legend.texts[1].set_text('Churned')
plt.show()

## By Payment Method

g7 = sns.catplot(
    x='Payment Method',
    hue='Churn',
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Payment Method")
plt.ylabel("Number of Users")
plt.xlabel("Payment Method")
g7._legend.set_title('Users')
g7._legend.texts[0].set_text('Active')
g7._legend.texts[1].set_text('Churned')
plt.show()

# By Internet Type

g8 = sns.catplot(
    x='Internet Type',
    hue='Churn',
    data=telco, 
    kind='count'
)
plt.title("Active vs Churned Users by Internet Type")
plt.ylabel("Number of Users")
plt.xlabel("Internet Type")
g8._legend.set_title('Users')
g8._legend.texts[0].set_text('Active')
g8._legend.texts[1].set_text('Churned')
plt.show()



# for those numeric variables: engineer new features and then group by within them 
Age
Avg Monthly GB Download
Satisfaction Score
Tenure in Months
Total Revenues
Streaming Activity
Total Charges

sns.scatterplot(x='Age', y='Satisfaction Score', data=telco, hue='Churn')
plt.show()

sns.scatterplot(x='Avg Monthly GB Download', y='Tenure in Months', data=telco, hue='Churn')
plt.show()

sns.scatterplot(x='Total Charges', y='Avg Monthly GB Download', data=telco, hue='Churn')
plt.show()

sns.scatterplot(x='Total Charges', y='Total Revenue', data=telco, hue='Churn')
plt.show()

sns.scatterplot(x='Avg Monthly GB Download', y='Total Revenue', data=telco, hue='Churn')
plt.show()

sns.scatterplot(x='Age', y='Total Revenue', data=telco, hue='Churn')
plt.show()


Methods
    Scatterplots
    Feature engineering > categorical variables